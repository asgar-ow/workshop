settings
{
	lobby
	{
		Map Rotation: After A Game
		Max FFA Players: 3
		Return To Lobby: After A Game
	}

	modes
	{
		Deathmatch
		{
			Game Length In Minutes: 15
			Score To Win: 50
			Self Initiated Respawn: Off

			enabled maps
			{
				Workshop Island
			}
		}

		General
		{
			Allow Hero Switching: Off
			Limit Roles: 2 Of Each Role Per Team
			Respawn As Random Hero: On
			Respawn Time Scalar: 25%
		}
	}

	heroes
	{
		General
		{
			Ultimate Generation: 133%
		}
	}
}

variables
{
	global:
		0: it
		1: active_players

	player:
		0: time_left
		1: next_hero
		2: old_it
		3: last_damaged_player
}

rule("dbg init")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Create Dummy Bot(Random Value In Array(All Heroes), All Teams, -1, Nearest Walkable Position(Vector(0, 0, 0)), Vector(0, 0, 0));
		Create Dummy Bot(Random Value In Array(All Heroes), All Teams, -1, Nearest Walkable Position(Vector(0, 0, 0)), Vector(0, 0, 0));
	}
}

disabled rule("dbg dummy shooty")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Start Holding Button(Event Player, Primary Fire);
		Wait(5, Ignore Condition);
		Stop Holding Button(Event Player, Primary Fire);
		Wait(Random Real(2, 5), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Init Player")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		If(Is Game In Progress);
			Disable Built-In Game Mode Respawning(Event Player);
			Enable Death Spectate All Players(Event Player);
			Wait(0.250, Ignore Condition);
			Kill(Event Player, Null);
		Else;
			Set Player Variable(Event Player, time_left, 20.900);
		End;
		Wait(0.250, Ignore Condition);
		Set Player Variable(Event Player, next_hero, Random Value In Array(Remove From Array(All Heroes, Hero Of(Event Player))));
	}
}

rule("Init Game")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Enable Death Spectate All Players(All Players(All Teams));
		Disable Built-In Game Mode Completion;
		Disable Built-In Game Mode Scoring;
		Set Global Variable(active_players, All Players(All Teams));
		Set Global Variable(it, Random Value In Array(All Players(All Teams)));
		Set Respawn Max Time(Global Variable(it), 2.500);
		Start Damage Modification(Remove From Array(All Players(All Teams), Global Variable(it)), Remove From Array(All Players(All Teams),
			Global Variable(it)), 0, Receivers Damagers and Damage Percent);
	}
}

rule("Update Match Timer")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Set Match Time(Player Variable(Global Variable(it), time_left));
		Wait(1, Ignore Condition);
		Loop;
	}
}

rule("dbg test")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Set Global Variable(it, Event Player);
	}
}

rule("Remove time from it")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Global Variable(it)) == True;
	}

	actions
	{
		Modify Player Variable(Global Variable(it), time_left, Subtract, 0.100);
		Wait(0.100, Abort When False);
		Loop;
	}
}

rule("It gets a kill")
{
	event
	{
		Player Earned Elimination;
		All;
		All;
	}

	conditions
	{
		Attacker == Global Variable(it);
	}

	actions
	{
		Destroy All Icons;
		Set Global Variable(it, Victim);
	}
}

rule("Update Non-Its")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, old_it) != Global Variable(it);
		Global Variable(it) != Event Player;
		Array Contains(Global Variable(active_players), Event Player) == True;
	}

	actions
	{
		Set Player Variable(Event Player, old_it, Global Variable(it));
		Create Icon(Global Variable(it), Event Player, Arrow: Down, Visible To and Position, Team 2, True);
		Create Icon(Remove From Array(Remove From Array(All Players(All Teams), Global Variable(it)), Event Player), Event Player, Happy,
			Visible To and Position, Lime Green, False);
		Set Move Speed(Event Player, 100);
		Set Max Health(Event Player, 100);
	}
}

rule("Update It")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, old_it) != Global Variable(it);
		Global Variable(it) == Event Player;
	}

	actions
	{
		Set Player Variable(Event Player, old_it, Global Variable(it));
		Set Move Speed(Event Player, 130);
		Set Max Health(Event Player, 300);
	}
}

rule("Record who it last damaged")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Victim != Event Player;
	}

	actions
	{
		Set Player Variable(Event Player, last_damaged_player, Victim);
	}
}

rule("IT ran out of time")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Player Variable(Global Variable(it), time_left) < 0;
	}

	actions
	{
		Kill(Global Variable(it), Null);
		Disable Built-In Game Mode Respawning(Global Variable(it));
		Modify Global Variable(active_players, Remove From Array By Value, Global Variable(it));
		Modify Player Score(Global Variable(active_players), 1);
		If(Compare(Count Of(Global Variable(active_players)), <=, 1));
			Declare Player Victory(First Of(Global Variable(active_players)));
		End;
		If(Array Contains(Global Variable(active_players), Player Variable(Global Variable(it), last_damaged_player)));
			Set Global Variable(it, Player Variable(Global Variable(it), last_damaged_player));
		Else;
			Set Global Variable(it, Random Value In Array(Global Variable(active_players)));
		End;
		Destroy All Icons;
	}
}

rule("Punish suicides")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Global Variable(it) != Victim;
		Attacker == Victim;
		Array Contains(Global Variable(active_players), Event Player) == True;
	}

	actions
	{
		Wait(2, Abort When False);
		Respawn(Event Player);
		Wait(1.500, Ignore Condition);
		Small Message(Event Player, Custom String("Try not to kill yourself out there...", Null, Null, Null));
		Set Status(Event Player, Null, Knocked Down, 8);
	}
}
