settings
{
	lobby
	{
		Map Rotation: After A Game
		Max FFA Players: 8
		Return To Lobby: After A Game
	}

	modes
	{
		Deathmatch
		{
			Score To Win: 50
			Self Initiated Respawn: Off

			enabled maps
			{
				Black Forest
				Blizzard World
				Castillo
				Ecopoint: Antarctica
				Necropolis
			}
		}

		General
		{
			Allow Hero Switching: Off
			Game Mode Start: Immediately
			Limit Roles: 2 Of Each Role Per Team
			Respawn As Random Hero: On
			Respawn Time Scalar: 25%
		}
	}

	heroes
	{
		General
		{
			Ultimate Generation: 133%
		}
	}
}

variables
{
	global:
		0: it
		1: active_players

	player:
		0: time_left
		1: next_hero
		2: old_it
		3: last_damaged_player
		4: center_hud_id
}

subroutines
{
	0: Reset
}

disabled rule("dbg test")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Set Global Variable(it, Event Player);
		Call Subroutine(Reset);
	}
}

disabled rule("dbg dummy shooty")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Start Holding Button(Event Player, Primary Fire);
		Wait(5, Ignore Condition);
		Stop Holding Button(Event Player, Primary Fire);
		Wait(Random Real(2, 5), Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("dbg init")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Create Dummy Bot(Random Value In Array(All Heroes), All Teams, -1, Nearest Walkable Position(Vector(0, 0, 0)), Vector(0, 0, 0));
		Create Dummy Bot(Random Value In Array(All Heroes), All Teams, -1, Nearest Walkable Position(Vector(0, 0, 0)), Vector(0, 0, 0));
	}
}

rule("Init Player")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		If(Is Game In Progress);
			Disable Built-In Game Mode Respawning(Event Player);
			Enable Death Spectate All Players(Event Player);
			Wait(0.250, Ignore Condition);
			Kill(Event Player, Null);
			Abort;
		Else;
			Set Player Variable(Event Player, time_left, 90.900);
		End;
		Wait(0.250, Ignore Condition);
		Set Player Variable(Event Player, next_hero, Random Value In Array(Remove From Array(All Heroes, Hero Of(Event Player))));
		Create HUD Text(Event Player, Icon String(Moon), Custom String("Your Timebank", Null, Null, Null), Custom String(
			"{0} seconds left", Round To Integer(Player Variable(Event Player, time_left), Down), Null, Null), Left, 1, White, White,
			White, Visible To and String, Default Visibility);
	}
}

rule("Init Game")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Enable Death Spectate All Players(All Players(All Teams));
		Disable Built-In Game Mode Completion;
		Disable Built-In Game Mode Scoring;
		Set Global Variable(active_players, All Players(All Teams));
		Set Global Variable(it, Random Value In Array(All Players(All Teams)));
	}
}

rule("Update Match Timer")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Set Match Time(Player Variable(Global Variable(it), time_left));
		Modify Player Variable(Global Variable(it), time_left, Subtract, 0.100);
		Wait(0.100, Ignore Condition);
		Loop;
	}
}

rule("It gets a kill")
{
	event
	{
		Player Earned Elimination;
		All;
		All;
	}

	conditions
	{
		Attacker == Global Variable(it);
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Set Global Variable(it, Victim);
		Call Subroutine(Reset);
	}
}

rule("Update Non-Its")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, old_it) != Global Variable(it);
		Global Variable(it) != Event Player;
		Array Contains(Global Variable(active_players), Event Player) == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		If(Compare(Player Variable(Event Player, center_hud_id), !=, 0));
			Destroy HUD Text(Player Variable(Event Player, center_hud_id));
		End;
		Set Player Variable(Event Player, old_it, Global Variable(it));
		Create Icon(Global Variable(it), Event Player, Arrow: Down, Visible To and Position, Team 2, True);
		Create Icon(Remove From Array(Remove From Array(All Players(All Teams), Global Variable(it)), Event Player), Event Player, Happy,
			Visible To and Position, Lime Green, False);
		Set Move Speed(Event Player, 100);
		Set Max Health(Event Player, 100);
		Start Damage Modification(Remove From Array(Remove From Array(All Players(All Teams), Global Variable(it)), Event Player),
			Event Player, 0, Receivers Damagers and Damage Percent);
		Create HUD Text(Event Player, Icon String(Warning), Custom String("{0} is it!", Global Variable(it), Null, Null), Custom String(
			"Don't get killed! Kill {0} to steal some of their time.", Global Variable(it), Null, Null), Top, 5, Aqua, Aqua, White,
			Visible To and String, Default Visibility);
		Set Player Variable(Event Player, center_hud_id, Last Text ID);
	}
}

rule("Update It")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, old_it) != Global Variable(it);
		Global Variable(it) == Event Player;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Set Player Variable(Event Player, old_it, Global Variable(it));
		Set Move Speed(Event Player, 130);
		Set Max Health(Event Player, 300);
		If(Compare(Player Variable(Event Player, center_hud_id), !=, 0));
			Destroy HUD Text(Player Variable(Event Player, center_hud_id));
		End;
		Create HUD Text(Event Player, Icon String(Exclamation Mark), Custom String("You're it!", Null, Null, Null), Custom String(
			"Kill someone before your time runs out!", Null, Null, Null), Top, 5, Red, Red, White, Visible To and String,
			Default Visibility);
		Set Player Variable(Event Player, center_hud_id, Last Text ID);
	}
}

rule("Record who it last damaged")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Victim != Event Player;
	}

	actions
	{
		Set Player Variable(Event Player, last_damaged_player, Victim);
	}
}

rule("It ran out of time")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Player Variable(Global Variable(it), time_left) < 0;
	}

	actions
	{
		Kill(Global Variable(it), Null);
		Disable Built-In Game Mode Respawning(Global Variable(it));
		Modify Global Variable(active_players, Remove From Array By Value, Global Variable(it));
		Modify Player Score(Global Variable(active_players), 1);
		If(Compare(Count Of(Global Variable(active_players)), <=, 1));
			Declare Player Victory(First Of(Global Variable(active_players)));
		End;
		If(Array Contains(Global Variable(active_players), Player Variable(Global Variable(it), last_damaged_player)));
			Set Global Variable(it, Player Variable(Global Variable(it), last_damaged_player));
		Else;
			Set Global Variable(it, Random Value In Array(Global Variable(active_players)));
		End;
		Call Subroutine(Reset);
	}
}

rule("Punish suicides")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Global Variable(it) != Victim;
		Attacker == Victim;
		Array Contains(Global Variable(active_players), Event Player) == True;
	}

	actions
	{
		Wait(2, Abort When False);
		Respawn(Event Player);
		Wait(1.500, Ignore Condition);
		Small Message(Event Player, Custom String("Try not to kill yourself out there...", Null, Null, Null));
		Set Status(Event Player, Null, Knocked Down, 8);
	}
}

rule("Kill it and get rewarded")
{
	event
	{
		Player Earned Elimination;
		All;
		All;
	}

	conditions
	{
		Victim == Global Variable(it);
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Icon String(Recycle), Custom String("Time stolen", Null, Null, Null), Custom String(
			"{0} stole 5 seconds from {1}", Attacker, Victim, Null), Right, 100, White, White, White, Visible To and String,
			Default Visibility);
		Modify Player Variable(Attacker, time_left, Add, 5);
		Modify Player Variable(Victim, time_left, Subtract, 2.500);
		Wait(5, Ignore Condition);
		Destroy HUD Text(Last Text ID);
	}
}

rule("SUB Reset")
{
	event
	{
		Subroutine;
		Reset;
	}

	actions
	{
		Destroy All Icons;
		Stop All Damage Modifications;
	}
}
