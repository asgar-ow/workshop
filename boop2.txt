settings
{
	lobby
	{
		Allow Players Who Are In Queue: Yes
	}

	modes
	{
		Deathmatch
		{
			enabled maps
			{
				Workshop Island
			}
		}

		General
		{
			Allow Hero Switching: Off
			Game Mode Start: Immediately
			Kill Cam: Off
			Kill Feed: Off
			Respawn As Random Hero: On
			Respawn Time Scalar: 50%
			Self Initiated Respawn: Off
		}
	}

	heroes
	{
		General
		{
			Health: 500%
			Ultimate Generation: 200%

			Baptiste
			{
				Immortality Field: Off
			}

			Brigitte
			{
				Repair Pack: Off
			}

			D.Va
			{
				Boosters Cooldown Time: 150%
			}

			Echo
			{
				Flight Cooldown Time: 200%
			}

			Genji
			{
				Swift Strike Cooldown Time: 125%
			}

			Hanzo
			{
				Lunge Cooldown Time: 125%
			}

			Mercy
			{
				Resurrect: Off
			}

			Moira
			{
				Fade Cooldown Time: 125%
			}

			Pharah
			{
				Hover Jets Maximum Time: 33%
				Jump Jet Cooldown Time: 150%
			}

			Reaper
			{
				Shadow Step Cooldown Time: 125%
				Wraith Form Cooldown Time: 125%
			}

			Soldier: 76
			{
				Biotic Field: Off
			}

			Sombra
			{
				Translocator Cooldown Time: 125%
			}

			Symmetra
			{
				Sentry Turret: Off
			}

			Torbj√∂rn
			{
				Deploy Turret: Off
			}

			Tracer
			{
				Blink Cooldown Time: 125%
				Recall Cooldown Time: 125%
			}

			Winston
			{
				Jump Pack Cooldown Time: 125%
			}

			Wrecking Ball
			{
				Grappling Claw Cooldown Time: 125%
			}

			Zenyatta
			{
				Orb of Harmony: Off
			}
		}
	}
}

variables
{
	player:
		0: last_damager
		1: next_hero
}

disabled rule("dbg change hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Crouch) == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Tracer));
	}
}

disabled rule("dbg spawn bot")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Crouch) == True;
	}

	actions
	{
		Create Dummy Bot(Random Value In Array(All Heroes), All Teams, -1, Nearest Walkable Position(Event Player), Vector(0, 0, 0));
	}
}

disabled rule("dbg dummy shooty")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Primary Fire);
		Wait(5, Ignore Condition);
		Stop Holding Button(Event Player, Primary Fire);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Init")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Disable Built-In Game Mode Scoring;
		Disable Built-In Game Mode Respawning(All Players(All Teams));
		Enable Death Spectate All Players(All Players(All Teams));
	}
}

rule("boop")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	actions
	{
		If(Compare(Event Damage, <, 10));
			disabled Apply Impulse(Event Player, Add(Direction Towards(Attacker, Event Player), Vector(0, 0.200, 0)), Multiply(0.800, Event Damage),
				To World, Cancel Contrary Motion);
			Apply Impulse(Event Player, Direction Towards(Attacker, Eye Position(Event Player)), Multiply(3.500, Event Damage), To World,
				Cancel Contrary Motion);
		Else;
			Apply Impulse(Event Player, Direction Towards(Attacker, Event Player), Multiply(1.500, Event Damage), To World,
				Cancel Contrary Motion);
			disabled Apply Impulse(Event Player, Add(Direction Towards(Attacker, Event Player), Vector(0, 0.200, 0)), Multiply(0.700, Event Damage),
				To World, Cancel Contrary Motion);
		End;
		Set Player Variable(Event Player, last_damager, Attacker);
		Apply Impulse(Event Player, Vector(0, 1, 0), 2, To World, Cancel Contrary Motion);
	}
}

rule("HoT")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Heal(All Living Players(All Teams), Null, 500);
		Wait(0.250, Ignore Condition);
		Loop;
	}
}

rule("\"Killfeed\" and death")
{
	event
	{
		Player Died;
		All;
		All;
	}

	actions
	{
		Set Player Variable(Event Player, next_hero, Random Value In Array(Filtered Array(All Heroes, Compare(Current Array Element, !=,
			Hero Of(Event Player)))));
		Preload Hero(Event Player, Player Variable(Event Player, next_hero));
		If(Compare(Player Variable(Event Player, last_damager), ==, Event Player));
			Modify Player Score(Event Player, -1);
			Create HUD Text(All Players(All Teams), Icon String(Question Mark), Custom String("Oops!", Null, Null, Null), Custom String(
				"{0} booped himself", Event Player, Null, Null), Right, 100, Red, Red, White, Visible To and String, Default Visibility);
		Else;
			Small Message(Event Player, Custom String("{0} booped you!", Player Variable(Event Player, last_damager), Null, Null));
			Modify Player Score(Player Variable(Event Player, last_damager), 1);
			Create HUD Text(All Players(All Teams), Icon String(Skull), Custom String("Boop!", Null, Null, Null), Custom String(
				"{0} booped {1}", Player Variable(Event Player, last_damager), Event Player, Null), Right, 100, Red, Red, White,
				Visible To and String, Default Visibility);
		End;
		Wait(3, Ignore Condition);
		Teleport(Event Player, Vector(Random Real(-16, 16), 0, Random Real(-16, 16)));
		Wait(1, Ignore Condition);
		Start Forcing Player To Be Hero(Event Player, Player Variable(Event Player, next_hero));
		Set Status(Event Player, Null, Invincible, 2);
		Wait(2, Ignore Condition);
		Destroy HUD Text(Last Text ID);
		Set Status(Event Player, Null, Phased Out, 2);
	}
}
